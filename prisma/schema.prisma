// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"

  url = env("POSTGRES_PRISMA_URL") // uses connection pooling

  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  organizerName      String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  superAdmin         Boolean    @default(false)
  isVerify           Boolean    @default(false)
  balance            Float      @default(0)
  point              Int        @default(0)
  isOrganizerProfile Boolean    @default(false)
  accounts           Account[]
  sessions           Session[]
  tickets            Ticket[]   @relation("UserTickets")
  events             Event[]    @relation("UserEvents")
  Purchase           Purchase[]
  Transfer           Transfer[]
  Product            Product[]  @relation("UserProducts")
  followers          Follower[] @relation("following")
  following          Follower[] @relation("followers")
}

model Event {
  id                     String     @id @default(cuid())
  name                   String     @unique
  slug                   String     @unique
  description            String
  eventType              String
  startDate              DateTime
  endDate                DateTime
  location               String
  image                  String?
  vipTicketPrice         String? // Prix du billet VIP
  standardTicketPrice    String? // Prix du billet standard
  vipTicketCapacity      String? // Capacité du billet VIP
  standardTicketCapacity String // Capacité du billet stand
  tickets                Ticket[]
  createdBy              User       @relation("UserEvents", fields: [createdById], references: [id])
  createdById            String
  approved               Boolean    @default(false)
  Purchase               Purchase[]
}

model Ticket {
  id          String   @id @default(cuid())
  ticketId    String   @unique
  eventId     String
  isVIPticket Boolean  @default(false)
  eventName   String
  eventImage  String
  userId      String?
  price       Float
  status      String   @default("available")
  qrCodePath  String?
  createdAt   DateTime @default(now())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade) // Définition de l'argument onDelete ici
  buyer       User?    @relation("UserTickets", fields: [userId], references: [id])
}

model Product {
  id                 String   @id @default(cuid())
  productName        String
  productDescription String
  price              Float
  quantity           Int
  image              String
  productPass        String?
  createdAt          DateTime @default(now())
  userId             String?
  buyer              User?    @relation("UserProducts", fields: [userId], references: [id])
}

model Purchase {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  price     Float
  createdAt DateTime @default(now())
  method    String
  buyer     User     @relation(fields: [buyerId], references: [id])
  buyerId   String
}

model Transfer {
  id              String   @id @default(cuid())
  amount          Float
  createdAt       DateTime @default(now())
  recipientAcc    String
  method          String
  recipientUser   User     @relation(fields: [recipientUserId], references: [id])
  recipientUserId String
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  followedAt  DateTime @default(now())

  follower  User @relation("following", fields: [followerId], references: [id])
  following User @relation("followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// J'ai suivi la documentation du nouveau [Prisma Adapter](https://authjs.dev/reference/adapter/prisma).

// Crée aussi un fichier :

// ```ts
// // src/lib/auth.ts
// import { GetServerSidePropsContext, NextApiRequest, NextApiResponse } from 'next';
// import { getServerSession } from 'next-auth';
// import { authOptions } from '../../pages/api/auth/[...nextauth]';

// type ParametersGetServerSession =
//   | []
//   | [GetServerSidePropsContext['req'], GetServerSidePropsContext['res']]
//   | [NextApiRequest, NextApiResponse];

// export const getAuthSession = async (...parameters: ParametersGetServerSession) => {
//   const session = await getServerSession(...parameters, authOptions);
//   return session;
// };
